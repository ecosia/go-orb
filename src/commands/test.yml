description: |
  Runs 'go test ./...' but includes extensive parameterization for finer tuning
parameters:
  packages:
    description: Import tests to run, by go list path glob.
    type: string
    default: "./..."
  race:
    description: |
      run tests with -race option
      (if enabled, update covermode to be "atomic")
    type: boolean
    default: false
  count:
    description: run each test and benchmark n times
    type: string
    default: "1"
  failfast:
    description: do not start new tests after the first test failure
    type: boolean
    default: false
  short:
    description: tell long-running tests to shorten their run time
    type: boolean
    default: false
  parallel:
    description: |
      Allow parallel execution of test functions that call t.Parallel.
      The value of this flag is the maximum number of tests to run
      simultaneously
    type: string
    default: "1"
  coverprofile:
    description: file to save coverage profile
    type: string
    default: "cover-source.out"
  covermode:
    description: |
      flag to set the coverage mode
      (the go default is: "set", unless -race is enabled, in which case the go default is "atomic")
    type: enum
    enum: ["set", "count", "atomic"]
    default: "set"
  verbose:
    description: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds.
    type: boolean
    # Switch this to true in a major release
    default: false
  coverpkg:
    description: |
      Apply coverage analysis in each test to packages matching the patterns.
      (Sets -cover.)
    type: string
    default: ""
  module-path:
    description: |
      Use a different path for the go module.
    type: string
    default: "."
  cover:
    description: |
      Enable cover without specifying cover packages. Will use the same as the tested packages.
    type: boolean
    default: false
steps:
  - run:
      command: >-
        go test
        <<parameters.packages>>
        <<# parameters.race >>-race<</ parameters.race >>
        -count=<<parameters.count>>
        -coverprofile=<<parameters.coverprofile>>
        <<# parameters.failfast >>-failfast<</ parameters.failfast >>
        <<# parameters.short >>-short<</ parameters.short >>
        -p <<parameters.parallel>>
        -covermode=<<parameters.covermode>>
        <<# parameters.verbose >>-v<</ parameters.verbose >>
        <<# parameters.cover>>-cover<</ parameters.cover>>
        <<# parameters.coverpkg>>-coverpkg=<<parameters.coverpkg>><</ parameters.coverpkg>>
      name: "go test"


##! /usr/bin/env bash
#set -eu
#
#CODE_COVERAGE_THRESHOLD=$1
## We need to prevent shellcheck SC2046 because go test requires String splitting.
## Read here https://github.com/koalaman/shellcheck/wiki/SC2046
## shellcheck disable=SC2046
#go test $(go list ./... | grep -v /proto) -cover -race -coverprofile cover.out
#TOTAL_COVERAGE=$(go tool cover -func cover.out | grep total: | awk '{printf "%d", substr($3, 1, length($3)-1)}')
#if [ "$TOTAL_COVERAGE" -lt "$CODE_COVERAGE_THRESHOLD" ]; then
#    echo "Code coverage below threshold. Threshold for this project is $CODE_COVERAGE_THRESHOLD, the returned total coverage was $TOTAL_COVERAGE."
#    exit 1
#else
#    echo "Total service coverage: $TOTAL_COVERAGE%, passes threshold."
#fi
